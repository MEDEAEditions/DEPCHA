
# all entry with a Credit Account

SELECT * from ECRITURES 
INNER JOIN COMPTES ON ECRITURES.ID_COMPTE_CREDITEUR = COMPTES.COMPTE_ID;

# ID_COMPTE_CREDITEUR | ID_COMPTE_DEBITEUR

SELECT * from ECRITURES 
INNER JOIN COMPTES ON ECRITURES.ID_COMPTE_CREDITEUR = COMPTES.COMPTE_ID
INNER JOIN ACTEURS ON ACTEURS.ACTEUR_ID = COMPTES.ACTEUR_ID
;



# all entries with acteurs and there type (like partner)

select ECRITURES.DATE_ECR, ECRITURES.DESCRIPTION, ACTEURS.TITRE,TYPE_ACTEUR.LIBELLE 
from ECRITURES 
INNER JOIN COMPTES ON ECRITURES.ID_COMPTE_CREDITEUR = COMPTES.COMPTE_ID
INNER JOIN ACTEURS ON ACTEURS.ACTEUR_ID = COMPTES.ACTEUR_ID
INNER JOIN TYPE_ACTEUR ON ACTEURS.TYPE_ACTEUR_ID = TYPE_ACTEUR.ID

;


# with quantities and values

select ECRITURES.DATE_ECR, ECRITURES.DESCRIPTION, ACTEURS.TITRE,TYPE_ACTEUR.LIBELLE  
ECRITURES.VALEUR1, ECRITURES.VALEUR2,  ECRITURES.VALEUR3,  ECRITURES.VALEUR4,   
ECRITURES.QUANTITE1, ECRITURES.QUANTITE2,  ECRITURES.QUANTITE3,  ECRITURES.QUANTITE4,
from ECRITURES 
INNER JOIN COMPTES ON ECRITURES.ID_COMPTE_CREDITEUR = COMPTES.COMPTE_ID
INNER JOIN ACTEURS ON ACTEURS.ACTEUR_ID = COMPTES.ACTEUR_ID
INNER JOIN TYPE_ACTEUR ON ACTEURS.TYPE_ACTEUR_ID = TYPE_ACTEUR.ID

;


# with units

select 
ECRITURES.DATE_ECR as bk_when, 
ECRITURES.DESCRIPTION as bk_entry, 
ACTEURS.TITRE as bk_name,
TYPE_ACTEUR.LIBELLE between_type,  
ECRITURES.VALEUR1, ECRITURES.VALEUR2,  ECRITURES.VALEUR3,  ECRITURES.VALEUR4,   
ECRITURES.QUANTITE1, ECRITURES.QUANTITE2,  ECRITURES.QUANTITE3,  ECRITURES.QUANTITE4,
TYPE_UNITE.LIBELLE as bk_unit,
OBJET_ECRITURE.LIBELLE as object_  

from ECRITURES 

INNER JOIN COMPTES ON ECRITURES.ID_COMPTE_CREDITEUR = COMPTES.COMPTE_ID
INNER JOIN ACTEURS ON ACTEURS.ACTEUR_ID = COMPTES.ACTEUR_ID
INNER JOIN TYPE_ACTEUR ON ACTEURS.TYPE_ACTEUR_ID = TYPE_ACTEUR.ID
INNER JOIN TYPE_UNITE ON ECRITURES.TYPE_UNITE_1_ID  = TYPE_UNITE.ID
INNER JOIN OBJET_ECRITURE ON ECRITURES.OBJET_ECRITURE_ID = OBJET_ECRITURE.ID
;


# optional join

select 
ECRITURES.DATE_ECR as bk_when, 
ECRITURES.DESCRIPTION as bk_entry, 
ACTEURS.TITRE as bk_name,
TYPE_ACTEUR.LIBELLE between_type,  
ECRITURES.VALEUR1 as bk_money1, ECRITURES.VALEUR2 as bk_money2,  ECRITURES.VALEUR3 as bk_money3,  ECRITURES.VALEUR4 as bk_money4,   
ECRITURES.QUANTITE1, ECRITURES.QUANTITE2,  ECRITURES.QUANTITE3,  ECRITURES.QUANTITE4,
TYPE_UNITE.LIBELLE as bk_unit,
OBJET_ECRITURE.LIBELLE as object_  

from ECRITURES 

LEFT OUTER JOIN COMPTES ON ECRITURES.ID_COMPTE_CREDITEUR = COMPTES.COMPTE_ID
LEFT OUTER JOIN ACTEURS ON ACTEURS.ACTEUR_ID = COMPTES.ACTEUR_ID
LEFT OUTER JOIN TYPE_ACTEUR ON ACTEURS.TYPE_ACTEUR_ID = TYPE_ACTEUR.ID
LEFT OUTER JOIN TYPE_UNITE ON ECRITURES.TYPE_UNITE_1_ID  = TYPE_UNITE.ID
LEFT OUTER JOIN OBJET_ECRITURE ON ECRITURES.OBJET_ECRITURE_ID = OBJET_ECRITURE.ID
;


# select all entries that must have a product ID, bk_commodityTaxonomy; profession, comment for person 


select 
ECRITURES.DATE_ECR as bk_when, 
ECRITURES.DESCRIPTION as bk_entry, 
ACTEURS.TITRE as bk_name, ACTEURS.OBSERVATIONS as acteur_comment, ACTEURS.PROFESSION as acteur_profession,
TYPE_ACTEUR.LIBELLE between_type,  
ECRITURES.VALEUR1 as bk_money1, ECRITURES.VALEUR2 as bk_money2,  ECRITURES.VALEUR3 as bk_money3,  ECRITURES.VALEUR4 as bk_money4,   
ECRITURES.QUANTITE1, ECRITURES.QUANTITE2,  ECRITURES.QUANTITE3,  ECRITURES.QUANTITE4,
TYPE_UNITE.LIBELLE as bk_currency,
OBJET_ECRITURE.LIBELLE as object_, 
PRODUITS.LIBELLE as bk_commodity,
TYPE_PRODUIT.LIBELLE as bk_commodityTaxonomy

from ECRITURES 

LEFT OUTER JOIN COMPTES ON ECRITURES.ID_COMPTE_CREDITEUR = COMPTES.COMPTE_ID
LEFT OUTER JOIN ACTEURS ON ACTEURS.ACTEUR_ID = COMPTES.ACTEUR_ID
LEFT OUTER JOIN TYPE_ACTEUR ON ACTEURS.TYPE_ACTEUR_ID = TYPE_ACTEUR.ID
LEFT OUTER JOIN TYPE_UNITE ON ECRITURES.TYPE_UNITE_1_ID  = TYPE_UNITE.ID
LEFT OUTER JOIN OBJET_ECRITURE ON ECRITURES.OBJET_ECRITURE_ID = OBJET_ECRITURE.ID
INNER JOIN PRODUITS ON ECRITURES.PRODUIT_ID = PRODUITS.PRODUIT_ID
INNER JOIN TYPE_PRODUIT ON PRODUITS.TYPE_PRODUIT_ID = TYPE_PRODUIT.ID
;


# type of account (	Compte personnel, Compte de commission etc.); status of person (Baron, Comte) 





select 
ECRITURES.DATE_ECR as bk_when, 
ECRITURES.DESCRIPTION as bk_entry, 
ACTEURS.TITRE as bk_name, 
ACTEURS.OBSERVATIONS as bk_betweenComment, 
ACTEURS.PROFESSION as bk_betweenProfession,
TYPE_CIVILTE.LIBELLE as bk_betweenCIVILTE,
TYPE_ACTEUR.LIBELLE as bk_betweenType, 
TYPE_COMPTE.LIBELLE as bk_accountType, 
ECRITURES.VALEUR1 as bk_money1, ECRITURES.VALEUR2 as bk_money2,  ECRITURES.VALEUR3 as bk_money3,  ECRITURES.VALEUR4 as bk_money4,   
ECRITURES.QUANTITE1, ECRITURES.QUANTITE2,  ECRITURES.QUANTITE3,  ECRITURES.QUANTITE4,
TYPE_UNITE.LIBELLE as bk_currency,
OBJET_ECRITURE.LIBELLE as object_, 
PRODUITS.LIBELLE as bk_commodity,
TYPE_PRODUIT.LIBELLE as bk_commodityTaxonomy

from ECRITURES 

LEFT OUTER JOIN COMPTES ON ECRITURES.ID_COMPTE_CREDITEUR = COMPTES.COMPTE_ID
LEFT OUTER JOIN TYPE_COMPTE ON COMPTES.TYPE_COMPTE_ID = TYPE_COMPTE.ID


LEFT OUTER JOIN ACTEURS ON ACTEURS.ACTEUR_ID = COMPTES.ACTEUR_ID
LEFT OUTER JOIN TYPE_ACTEUR ON ACTEURS.TYPE_ACTEUR_ID = TYPE_ACTEUR.ID
LEFT OUTER JOIN TYPE_CIVILTE ON ACTEURS.CIVILTE1_ID = TYPE_CIVILTE.ID

LEFT OUTER JOIN TYPE_UNITE ON ECRITURES.TYPE_UNITE_1_ID  = TYPE_UNITE.ID
LEFT OUTER JOIN OBJET_ECRITURE ON ECRITURES.OBJET_ECRITURE_ID = OBJET_ECRITURE.ID

LEFT OUTER JOIN PRODUITS ON ECRITURES.PRODUIT_ID = PRODUITS.PRODUIT_ID
LEFT OUTER JOIN TYPE_PRODUIT ON PRODUITS.TYPE_PRODUIT_ID = TYPE_PRODUIT.ID

;
  
  
  
  





 
 