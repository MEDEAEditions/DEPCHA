<?xml version="1.0" encoding="UTF-8"?>
<!-- 
    Project: GAMS Projekttemplate
    Company: ZIM-ACDH (Zentrum fÃ¼r Informationsmodellierung - Austrian Centre for Digital Humanities)
 -->

<xsl:stylesheet xmlns:xsl="http://www.w3.org/1999/XSL/Transform" version="2.0"
    xmlns:i18n="http://apache.org/cocoon/i18n/2.1"
    xmlns:xs="http://www.w3.org/2001/XMLSchema"
    xmlns:s="http://www.w3.org/2001/sw/DataAccess/rf1/result" xmlns="http://www.w3.org/1999/xhtml"
    xmlns:t="http://www.tei-c.org/ns/1.0"
    xmlns:owl="http://www.w3.org/2002/07/owl#"
    xmlns:oai_dc="http://www.openarchives.org/OAI/2.0/oai_dc/"
    xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#"
    xmlns:dc="http://purl.org/dc/elements/1.1/" exclude-result-prefixes="#all">
    
    <xsl:output method="xml" doctype-system="about:legacy-compat" encoding="UTF-8" indent="no"/>
    
    
    <xsl:include href="depcha-static.xsl"/>
    
	<xsl:template name="content">
    <!-- VARIABLES -->
    <!-- ///////////////////////////////////// -->
    <!-- extract context out of <query></context:depcha.wfp></query> -->
   
    <!-- if Query contains a context its a Collection, otherwise a searchresult -->
    <!-- CONTEYT -->
    <xsl:variable name="Context">
        <xsl:choose>
            <xsl:when test="contains(//s:results/s:result[1]/s:query, 'context:depcha')">
                <xsl:value-of select="substring-before(substring-after(//s:results/s:result[1]/s:query, 'uni-graz.at/'), '>')"/>
            </xsl:when>
            <xsl:otherwise>
                <xsl:value-of select="//s:results/s:result[1]/s:query"/>
            </xsl:otherwise>
        </xsl:choose>
    </xsl:variable>
    <!-- CONTEXTTITLE -->
    <xsl:variable name="ContextTitle">
        <xsl:choose>
            <xsl:when test="contains($Context, 'context:depcha')">
                <xsl:value-of select="document(concat('/archive/objects/', $Context, '/methods/sdef:Object/getMetadata'))//s:results/s:result[1]/s:container"/>
            </xsl:when>
            <xsl:otherwise>
                <xsl:value-of select="$Context"/>
            </xsl:otherwise>
        </xsl:choose>
    </xsl:variable>
    
    
    <!-- d3.js CSS -->
		
		<!-- delet? -->
		
<!--    <style>
        table.ex1 {
        empty-cells: hide;
        }
        
        table.ex2 {
        empty-cells: show;
        }
    </style>
    <style>
        .links line{
        stroke: #999;
        stroke-opacity: 0.6;
        }
        
        .nodes circle{
        stroke: #fff;
        stroke-width: 1.5px;
        }
    </style>-->
       
         <!-- ///////////////////////////////////////////////////////////// -->
         <!-- NAV -->
         <!-- //////////////////////////////////////// -->
        <!--<div class="col-md-2">
            <div class="card" id="sticky-sidebar">
                <div class="card-header">
                    <h3>Navigation</h3>
                    <!-\-<a href="#" target="_blank">
                        <img alt="RDF" id="rdf" src="/templates/img/RDF_icon.png" title="RDF" height="25"/>
                    </a>-\->
                    <br/>
                    
                </div>
                <div class="card-body">  
                    <ul>
                        <li>
                            <a href="#Actors" onclick="scrolldown(this)">Actors</a>
                        </li>
                        <li>
                            <a href="#Measurables" onclick="scrolldown(this)">Measurables</a>
                        </li>
                        <li>
                            <a href="#Visualisation"  onclick="scrolldown(this)">Visualisation</a>
                        </li>
                    </ul>
                </div>
            </div>
        </div>-->
        <!-- ///////////////////////////////////////////////////////////// -->
        <!-- CONTENT-->
         <!-- //////////////////////////////////////// -->
            <div class="card">
                <xsl:choose>
                	<!-- if query = search or collection -->
                	<xsl:when test="//s:results/s:result[1]/s:query">
                		<div class="card-header"> 
	                        <h1 class="card-title">
	                            <xsl:choose>
	                                <xsl:when test="contains($Context, 'context:depcha')">
	                                    <xsl:value-of select="$ContextTitle"/>
	                                </xsl:when>
	                                <!-- its a between search -->
	                                <xsl:when test="contains($Context, '#Between')">
	                                    <xsl:text>Accounts SEARCH: </xsl:text>
	                                </xsl:when>
	                                <xsl:when test="contains($Context, 'o:depcha')">
	                                    <xsl:text>TEI SOURCE: </xsl:text>
	                                    <xsl:value-of select="document(concat((substring-before(substring-after(//s:results/s:result[1]/s:query, '&lt;'), '&gt;')), '/TEI_SOURCE'))//t:titleStmt/t:title"/>
	                                </xsl:when>
	                                <xsl:otherwise>
	                                    <xsl:text>SEARCH: </xsl:text><mark><xsl:value-of select="$ContextTitle"/></mark>
	                                	<br/>
	                                	<xsl:text>SEARCHRESULT: </xsl:text><xsl:value-of select="count(distinct-values(//s:results/s:result/s:Transfer/@uri))"/>
	                                </xsl:otherwise>
	                            </xsl:choose>
	                        </h1>
	                        <div>
	                            <p>
	                            	<xsl:text>Here can be a nice Text!</xsl:text>
	                            </p>
	                        </div>
	                    </div>
                		<!-- //////////////////////////////////////// -->
	                    <!-- DATATABLE -->
	                    <!-- //////////////////////////////////////// -->
	                    <div class="card-body" id="datatable">
	                        <nav aria-label="breadcrumb">
	                            <ol class="breadcrumb">
	                                <xsl:for-each-group select="//s:result" group-by="s:Collection/@uri">
	                                    <xsl:variable name="Table-ID" select="concat('table_id', position())"/>
	                                    <li class="breadcrumb-item active">
	                                        <a href="#{$Table-ID}"><xsl:value-of select="document(concat('/archive/objects/', substring-after(current-grouping-key(), '//gams.uni-graz.at/'), '/methods/sdef:Object/getMetadata'))//s:results/s:result[1]/s:container"/></a>
	                                    </li>  
	                                </xsl:for-each-group>
	                                <li class="breadcrumb-item"><a href="#Measurables">Commodities and Services</a></li>
	                                <li class="breadcrumb-item" aria-current="page"><a href="#Barchart">In and Outcomes of recording author</a></li>
	                            </ol>
	                        </nav>
	                        <!--<h3 class="card-title">
	                            Data Entries
	                        </h3>-->
	                    	
	                    	 <xsl:for-each-group select="//s:result" group-by="s:Collection/@uri">
	                    	     <xsl:if test="not(contains($Context, 'context:depcha'))">
	                    	         <a href="{concat('/archive/objects/query:depcha.getdata-context/methods/sdef:Query/get?params=$1|&lt;', current-grouping-key(), '&gt;')}">
	                    	             <h3 class="card-title">
	                    	                 <xsl:value-of select="document(concat('/archive/objects/', substring-after(current-grouping-key(), '//gams.uni-graz.at/'), '/methods/sdef:Object/getMetadata'))//s:results/s:result[1]/s:container"/>
	                    	             </h3>
	                    	         </a>
	                    	     </xsl:if>
	                    	     
								<!-- export for objects -->
	                    	 	 <div class="card-text">
	                    	 	     <xsl:choose>
	                    	 	         <xsl:when test="contains(s:query, '#Between')">
	                    	 	             
	                    	 	         </xsl:when>
	                    	 	         <xsl:when test="contains($Context, 'o:depcha')">
	                    	 	             <a class="btn" href="{concat(substring-before(substring-after(//s:results/s:result[1]/s:query, '&lt;'), '&gt;'),'/RDF')}" role="button" style="margin: 10px;" target="_blank">
	                    	 	                 <img alt="RDF" height="25" id="rdf" src="/templates/img/RDF_icon.png" title="RDF"/>
	                    	 	             </a>
	                    	 	             <a href="{concat('/archive/objects/query:depcha.getdata-tei/methods/sdef:Query/get?params=$1|&lt;https://gams.uni-graz.at/', //t:idno[@type = 'PID'], '&gt;')}" id="datatable_button" class="btn">
	                    	 	                 <xsl:text>Datatable</xsl:text>
	                    	 	             </a>
	                    	 	             <a class="button" href="{concat(substring-before(substring-after(//s:results/s:result[1]/s:query, '&lt;'), '&gt;'),'/TEI_SOURCE')}" role="button" style="margin: 10px;" target="_blank">
	                    	 	                 <img alt="TEI" height="25" id="tei" src="/templates/img/tei_icon.jpg" title="TEI"/>
	                    	 	             </a>
	                    	 	         </xsl:when>
	                    	 	         <xsl:otherwise/>
	                    	 	     </xsl:choose>
	                    	 	     
	                    	 	<!-- ecreate query -->
	                    	 	<xsl:variable name="QueryParam">
	                    	 	<xsl:choose>
	                    	 	    <!-- if its a between search -->
	                    	 	    <xsl:when test="contains(s:query, '#Between')">
	                    	 	        <xsl:value-of select="concat('/archive/objects/query:depcha.index-between/methods/sdef:Query/getHSSF?params=$1|', s:query)"/>
	                    	 	    </xsl:when>
	                    	 		<!-- if its a search query -->
	                    	 		<xsl:when test="contains(s:query, 'context:depcha')">
	                    	 			<xsl:value-of select="concat('/archive/objects/query:depcha.getdata-context/methods/sdef:Query/getHSSF?params=$1|', s:query)"/>
	                    	 		</xsl:when>
	                    	 	    <xsl:when test="contains(s:query, 'o:depcha')">
	                    	 	        <xsl:value-of select="concat('/archive/objects/query:depcha.getdata-tei/methods/sdef:Query/getHSSF?params=$1|', s:query)"/>
	                    	 	    </xsl:when>
	                    	 		<!-- it is a collection -->
	                    	 		<xsl:otherwise>
	                    	 			<xsl:value-of select="concat('/archive/objects/query:depcha.fulltext/methods/sdef:Query/getHSSF?params=$1|', s:query)"/>
	                    	 		</xsl:otherwise>
	                    	 	</xsl:choose>
	                    	 	</xsl:variable>
	                    	 
                                <a class="btn" href="{$QueryParam}" role="button" style="margin: 10px;">
                                    <img alt="Excel" height="25" id="rdf" src="/gamsdev/pollin/depcha/trunk/www/img/TABELLENSYMBOL.png" title="HSSF"/>
                                </a>
	                    		</div>
	                    		
	                    		<xsl:variable name="Table-ID" select="concat('table_id', position())"/>
		                    	<!-- call DataTable -->
								<script>
								    $(document).ready(function() {
								    $('#<xsl:value-of select="$Table-ID"/>').DataTable();
								    } );
								</script>
	                    	 	
	                    	 	<!-- DATATABLE -->
		                        <table id="{$Table-ID}" class="table table-bordered" style="width:100%">
		                            <thead>
		                                <tr>
		                                    <th><xsl:text>ENTRY</xsl:text></th>
		                                    <th><xsl:text>WHEN</xsl:text></th>
		                                    <th><xsl:text>FROM</xsl:text></th>
		                                    <th><xsl:text>TO</xsl:text></th>
		                                    <th><xsl:text>MEASURABLE</xsl:text></th>
		                                    <th><xsl:text></xsl:text></th>
		                                </tr>
		                            </thead>
		                            <tbody>		                            	
		                            	<!-- //////////////////////////////////////// -->
		                                <xsl:for-each-group select="current-group()" group-by="s:Transfer/@uri">
		                                    <xsl:sort select="s:When"/>
		                                  
		                                  <!--<xsl:for-each select="current-group()">-->
		                                    <!-- variables -->
		                                    <!-- TEI-PID: gams.uni-graz.at/ o:depcha.wheaton.181 #Transaction-31-Transfer-1 -->
		                                    <xsl:variable name="TEI" select="substring-before(substring-after(s:Transfer/@uri, 'https://gams.uni-graz.at/'), '#')"/>
		                                    <xsl:variable name="TEI_SOURCE" select="document(concat('/', substring-before(substring-after(s:Transfer/@uri, 'https://gams.uni-graz.at/'), '#'), '/TEI_SOURCE'))"/>
		                                	<!-- Entry -->
		                                    <xsl:variable name="Entry" select="normalize-space(s:Entry)"/>
		                                    
		                                	<!-- DATE -->
		                                    <xsl:variable name="Date" select="normalize-space(s:When)"/>
		                                    <xsl:variable name="Year">
		                                        <xsl:choose>
		                                            <xsl:when test="$Date castable as xs:date">
		                                                <xsl:value-of select="year-from-date(xs:date($Date))"/>
		                                            </xsl:when>
		                                            <xsl:otherwise/>
		                                        </xsl:choose>
		                                    </xsl:variable>
		                                    <xsl:variable name="Month">
		                                        <xsl:choose>
		                                            <xsl:when test="$Date castable as xs:date">
		                                                <xsl:value-of select="month-from-date(xs:date($Date))"/>
		                                            </xsl:when>
		                                            <xsl:otherwise/>
		                                        </xsl:choose>
		                                    </xsl:variable>
		                                    <xsl:variable name="Day">
		                                        <xsl:choose>
		                                            <xsl:when test="$Date castable as xs:date">
		                                                <xsl:value-of select="day-from-date(xs:date($Date))"/>
		                                            </xsl:when>
		                                            <xsl:otherwise/>
		                                        </xsl:choose>
		                                    </xsl:variable>
		                                	
		       								<!-- FROM/TO name -->
		                                    <xsl:variable name="From" select="normalize-space(s:From_name)"/>
		                                    <xsl:variable name="To" select="normalize-space(s:To_name)"/>
		                                    <!-- MEASURABLE -->
		                                    
		                                	<xsl:variable name="Measurable_type" select="substring-after(s:Measurable_type/@uri, '#')"/>
		                                    <!--<xsl:variable name="Measurable">
		                                        <xsl:choose>
		                                            <xsl:when test="$Measurable_type = 'Money'">
		                                                <xsl:for-each-group select="current-group()" group-by="s:Unit">
		                                                    <xsl:value-of select="s:Quantity"/><xsl:text> </xsl:text><xsl:value-of select="s:Unit"/><xsl:text> </xsl:text><xsl:value-of select="s:Commodity"/>
		                                                </xsl:for-each-group>
		                                            </xsl:when>
		                                            <xsl:when test="$Measurable_type = 'Service'">
		                                                <xsl:for-each-group select="current-group()" group-by="s:Unit">
		                                                    <xsl:value-of select="s:Quantity"/><xsl:text> </xsl:text><xsl:value-of select="s:Unit"/><xsl:text> </xsl:text><xsl:value-of select="s:Commodity"/>
		                                                </xsl:for-each-group>
		                                            </xsl:when>
		                                            <xsl:when test="$Measurable_type = 'Commodity'">
		                                                <xsl:for-each-group select="current-group()" group-by="s:Unit">
		                                                    <xsl:value-of select="s:Quantity"/><xsl:text> </xsl:text><xsl:value-of select="s:Unit"/><xsl:text> </xsl:text><xsl:value-of select="s:Commodity"/>
		                                                </xsl:for-each-group>
		                                            </xsl:when>
		                                            <xsl:otherwise>nope</xsl:otherwise>
		                                        </xsl:choose>
		                                    </xsl:variable>-->
		                                    <tr>
		                                        <td>
		                                            <a href="/{$TEI}" data-toggle="tooltip" title="To the TEI Source">
		                                            	<xsl:value-of select="$Entry"/>
		                                            </a>
		                                        </td>
		                                        <td>
		                                            <xsl:if test="$Day">
		                                                <xsl:value-of select="$Day"/><xsl:text>.</xsl:text>
		                                            </xsl:if>
		                                            <xsl:if test="$Month">
		                                                <xsl:value-of select="$Month"/><xsl:text>.</xsl:text>
		                                            </xsl:if>
		                                            <xsl:value-of select="$Year"/><xsl:text> </xsl:text>
		                                        </td>
		                                        <td>
		                                            <xsl:if test="$From">
      		                                            <a href="{concat('/archive/objects/query:depcha.index-between/methods/sdef:Query/get?params=$1|&lt;', encode-for-uri(normalize-space(s:From/@uri)), '&gt;')}">
      		                                              <xsl:value-of select="$From"/>
      		                                            </a>
		                                            </xsl:if>
		                                            <xsl:text> </xsl:text>
		                                        </td>
		                                        <td>
		                                            <xsl:if test="$To">
		                                                <a href="{concat('/archive/objects/query:depcha.index-between/methods/sdef:Query/get?params=$1|&lt;', encode-for-uri(normalize-space(s:To/@uri)), '&gt;')}">
		                                                    <xsl:value-of select="$To"/>
		                                                </a>
		                                            </xsl:if>
		                                            <xsl:text> </xsl:text>
		                                        </td>
		                                        <td>
		                                            <xsl:choose>
		                                                <xsl:when test="$Measurable_type = 'Money'">
		                                                    <!-- for every shilling, pence, dollar, etc. -->
		                                                    <xsl:for-each-group select="current-group()" group-by="s:Unit">
		                                                        <xsl:value-of select="s:Quantity"/><xsl:text> </xsl:text><xsl:value-of select="s:Unit"/><xsl:text> </xsl:text><xsl:value-of select="s:Commodity"/><br/>
		                                                    </xsl:for-each-group>
		                                                </xsl:when>
		                                                <xsl:when test="$Measurable_type = 'Service'">
		                                                    <xsl:for-each-group select="current-group()" group-by="s:Unit">
		                                                        <xsl:value-of select="s:Quantity"/><xsl:text> </xsl:text><xsl:value-of select="s:Unit"/><xsl:text> </xsl:text><xsl:value-of select="s:Commodity"/><br/>
		                                                    </xsl:for-each-group>
		                                                </xsl:when>
		                                                <xsl:when test="$Measurable_type = 'Commodity'">
		                                                    <!-- as commodity is always something different (powder, knife) -->
		                                                    <xsl:for-each-group select="current-group()" group-by="s:Commodity">
		                                                        <xsl:value-of select="s:Quantity"/><xsl:text> </xsl:text><xsl:value-of select="s:Unit"/><xsl:text> </xsl:text><xsl:value-of select="s:Commodity"/><br/>
		                                                    </xsl:for-each-group>
		                                                </xsl:when>
		                                                <xsl:otherwise>nope</xsl:otherwise>
		                                            </xsl:choose>
		                                           <!-- <xsl:value-of select="$Measurable"/><xsl:text> </xsl:text>-->
		                                        </td>
		                                        <td>
		                                            <span class="row">
		                                                <span class="col-md-8">
		                                                    <xsl:if test="$TEI">
		                                                        <a href="{concat('/', $TEI)}" target="_blank" title="To the transcription">
		                                                            <xsl:value-of select="$TEI_SOURCE//t:teiHeader/t:fileDesc/t:titleStmt/t:title[1]"/>
		                                                        </a>
		                                                    </xsl:if>
		                                                    <xsl:text> </xsl:text>
		                                                </span>
		                                                <span class="col-md-4">
		                                                    <xsl:if test="s:Context">
		                                                        <xsl:value-of select="s:Context"/>
		                                                    </xsl:if>
		                                                    <xsl:text> </xsl:text>
		                                                </span>
		                                            </span>
		                                        </td>
		                                    </tr>
		                                  <!--</xsl:for-each>-->
		                                </xsl:for-each-group>
		                            </tbody>
		                        </table>
	                    	 </xsl:for-each-group>
	                    </div>
	                        
                        <!-- //////////////////////////////////////// -->
                        <!-- MEASURABLES -->
                        <!-- //////////////////////////////////////// -->
                		<div class="col-md-12" id="Measurables">
                            <div class="card">
                                <h3 class="card-title">Commodities and Services</h3>
                                <!-- //////////////////////////////////////// -->
                                <!-- BUBBLE -->
                                <div id="bubble">
                                    <xsl:call-template name="getBubbleChart"/>
                                </div>
                            </div>
	                    </div> 
                		
	                    <!-- //////////////////////////////////////// -->
	                    <!-- VISUALISATION -->
	                    <!-- //////////////////////////////////////// -->
                	    <div class="col-md-12" id="Barchart">
	                        <div class="card">
	                            <h3 class="card-title">
	                                <xsl:text>In and Outcomes of recording author</xsl:text>
	                            </h3>
	                            <div class="row" id="Visualisation">
	                                <style>
	                                    .bar {
	                                    fill: steelblue;
	                                    }
	                                    .bar:hover {
	                                    fill: brown;
	                                    }
	                                    .axis-\-x path {
	                                    display: none;
	                                    }
	                                </style>
	                            	<!-- ///////////////////////////////////// -->
	                                <!--  Bar Chart https://bl.ocks.org/mbostock/3885304 -->
	    							<!-- ///////////////////////////////////// -->
	                            	<!--<xsl:call-template name="getBarChart"/>-->
	                                <div id="barchart_in_out"><xsl:call-template name="getBarChartInandOutcome"/></div>
	                            	
			                    </div>
		                     </div>
	                    </div>
                	</xsl:when>
	            	<xsl:otherwise>
		            	<div class="card-header"> 
	                        <h1 class="card-title">
	                            <xsl:text>Nothing found</xsl:text>
	                        </h1>
	                        <div class="card-body">
	                            <p>Here is some help for super cool search queries!</p>
	                        </div>
		                </div>
	            	</xsl:otherwise>
           </xsl:choose> 
         </div>
      
    
    </xsl:template>
    
    
    
    <!-- ///////////////////////////////////// -->
    <!--  Bar Chart with Negative Values https://bl.ocks.org/WillTurman/9c4142944f6132855fd318350f552b7b -->
    <!-- ///////////////////////////////////// -->
    <xsl:template name="getBarChartInandOutcome">
       <!-- <style> 
            .title {
            font: 15px sans-serif;
            }
            .legend {
            font: 10px sans-serif;
            }
            .axis path,
            .axis line {
            fill: none;
            stroke: #000;
            shape-rendering: crispEdges;
            }
            .x.axis.path {
            display: none;
            }
        </style>-->
        <script>
            
            var data = 
            [
            <xsl:for-each-group select="//s:results/s:result[s:When castable as xs:date]" group-by="year-from-date(s:When)">
        		<xsl:sort select="current-grouping-key()"/>

        		<xsl:variable name="From_Sum">
              		<xsl:call-template name="calculateSum_From">
              		    <xsl:with-param name="Collection_URI" select="s:Collection/@uri"/>
              		    <!-- must be a RDF triple and query result -->
              		    <xsl:with-param name="Main_Recording_Author">
              		        <xsl:choose>
              		            <xsl:when test="s:Collection/@uri = 'https://gams.uni-graz.at/context:sampleData'">
              		                <xsl:value-of select="'CP_Pers.01'"/>
              		            </xsl:when>
              		            <xsl:when test="s:Collection/@uri = 'https://gams.uni-graz.at/context:depcha.wheaton'">
              		                <xsl:value-of select="'pers_MightyWheatonHimself'"/>
              		            </xsl:when>
              		            <xsl:when test="s:Collection/@uri = 'https://gams.uni-graz.at/context:depcha.stagville'">
              		                <xsl:value-of select="'StagyStagville'"/>
              		            </xsl:when>
              		            <xsl:when test="s:Collection/@uri = 'https://gams.uni-graz.at/context:depcha.wfp'">
              		                <xsl:value-of select="'11833'"/>
              		            </xsl:when>
              		            <xsl:when test="s:Collection/@uri = 'https://gams.uni-graz.at/context:depcha.schlitz'">
              		                <xsl:value-of select="'pers_TheSchlitzBros'"/>
              		            </xsl:when>
              		        </xsl:choose>
              		    </xsl:with-param>
              		</xsl:call-template>
        		</xsl:variable>
                
                <xsl:variable name="To_Sum">
                    <xsl:call-template name="calculateSum_To">
                        <xsl:with-param name="Collection_URI" select="s:Collection/@uri"/>
                        <xsl:with-param name="Main_Recording_Author">
                            <xsl:choose>
                                <xsl:when test="s:Collection/@uri = 'https://gams.uni-graz.at/context:sampleData'">
                                    <xsl:value-of select="'CP_Pers.01'"/>
                                </xsl:when>
                                <xsl:when test="s:Collection/@uri = 'https://gams.uni-graz.at/context:depcha.wheaton'">
                                    <xsl:value-of select="'pers_MightyWheatonHimself'"/>
                                </xsl:when>
                                <xsl:when test="s:Collection/@uri = 'https://gams.uni-graz.at/context:depcha.stagville'">
                                    <xsl:value-of select="'StagyStagville'"/>
                                </xsl:when>
                                <xsl:when test="s:Collection/@uri = 'https://gams.uni-graz.at/context:depcha.wfp'">
                                    <xsl:value-of select="'11833'"/>
                                </xsl:when>
                                <xsl:when test="s:Collection/@uri = 'https://gams.uni-graz.at/context:depcha.schlitz'">
                                    <xsl:value-of select="'pers_TheSchlitzBros'"/>
                                </xsl:when>
                            </xsl:choose>
                        </xsl:with-param>
                    </xsl:call-template>
                </xsl:variable>
        		
        		<!-- <xsl:variable name="Sum">
		            <xsl:choose>
		                <!-\- WASHINGTON punds, shilling, pence-\->
		                <xsl:when test="contains(//s:result[1]/s:query,'context:depcha.wfp')">
		                    <xsl:value-of 
		                    	select="round((sum(current-group()/s:Quantity[../s:Unit = 'Pounds'][distinct-values(../s:Transfer/@uri)])) + 
		                    	(sum(current-group()/s:Quantity[../s:Unit = 'Shillings'][distinct-values(../s:Transfer/@uri)]) div / 10)) + 
		                    	(sum(current-group()/s:Quantity[../s:Unit = 'Pence'][distinct-values(../s:Transfer/@uri)]) div / 100)"/>
		                </xsl:when>
		                <!-\- WHEATON dollar, cent -\->
		                <xsl:when test="contains(//s:result[1]/s:query,'context:depcha.wheaton')">
		                    <xsl:value-of select="round((sum(current-group()/s:Quantity[../s:Unit = 'dollars'][distinct-values(../s:Transfer/@uri)])) + (sum(current-group()/s:Quantity[../s:Unit = 'cents'][distinct-values(../s:Transfer/@uri)]) div / 100))"/>
		                </xsl:when>
		                <xsl:otherwise>
		                    <xsl:value-of select="1"/>
		                </xsl:otherwise>
		            </xsl:choose>
		        </xsl:variable>-->

        		<!-- defines date needed for chart -->
        	  <!--  <xsl:variable name="Date">
        	        <xsl:if test="current-grouping-key() castable as xs:date">
               	        <xsl:choose>
               	            <!-\- if date like 1800-10 -> 1800:10 -\->
               	            <xsl:when test="number(month-from-date(current-grouping-key())) &gt;= 10">
               	                <xsl:value-of select="current-grouping-key()"/>
               	            </xsl:when>
               	            <xsl:otherwise>
               	                <xsl:value-of select="concat(substring-before(current-grouping-key(),'-'), ':0', substring-after(current-grouping-key(),'-'))"/>
               	            </xsl:otherwise>
               	        </xsl:choose>
        	        </xsl:if>
        	    </xsl:variable>-->
                

                <!-- mittelwer -->
                <xsl:variable name="test">
                    <xsl:value-of select="$To_Sum + $From_Sum"/>
                    <!--<xsl:choose>
                        <xsl:when test="abs($To_Sum) gt abs($From_Sum)">
                            <xsl:value-of select="abs($To_Sum)"/>
                        </xsl:when>
                        <xsl:otherwise>
                            <xsl:value-of select="$From_Sum"/>
                        </xsl:otherwise>
                    </xsl:choose>-->
                </xsl:variable>
             	{
             	<!--  "date": "<xsl:value-of select="$Date"/>",-->
                "date": <xsl:value-of select="current-grouping-key()"/>,
        	    "from": <xsl:value-of select="$From_Sum"/>,
                "to": <xsl:value-of select="$To_Sum"/>,
        	  <!--    "c_h": -1,
        	    "so_i": 1,-->
                "cfnai": <xsl:value-of select="$test"/>
				}
				<xsl:if test="not(position()=last())">
					<xsl:text>,</xsl:text>
				</xsl:if>
             </xsl:for-each-group>
            ];
   
       	var margin = {top: 20, right: 20, bottom: 30, left: 40};
       	var width = 960 - margin.left - margin.right;
       	var height = 500 - margin.top - margin.bottom;
       
        var timeFormat = d3.timeFormat("%Y");
       	var parseDate = d3.timeParse("%Y");

       	var x = d3.scaleTime()
       		.range([0, width]);
       
       	var y = d3.scaleLinear()
       		.range([height, margin.top]);
       
       	var center = d3.scaleLinear()
       		.range([0, width]);
       
       	var color = d3.scaleOrdinal()
       	.range(["#B13C3D","#BBCDA3" ]);
       
       	var labels = ["From", "To"];
       
       <!-- ticks sind die einzelnen Sürunge im Diagramm, x-Achse, die datumsangaben, y-Achse die Werte -->
            var xAxis = d3.axisBottom(x).ticks(12);
            var yAxis = d3.axisLeft(y).ticks(20);
       
       	var centerLine = d3.axisTop(center).ticks(0);
       	data = data.slice(data.length - 125, data.length );
       	var keys = d3.keys(data[0]);
       	var keys = keys.filter(function(key) { 
       		if (key !== "id" <xsl:text disable-output-escaping = "yes"><![CDATA[&&]]></xsl:text>  key !== "date" <xsl:text disable-output-escaping = "yes"><![CDATA[&&]]></xsl:text> key !== "cfnai") {
       			return key; 
       		}  
       	});
       	
       	data.forEach(function(d) {
           	var y0_positive = 0;
           	var y0_negative = 0;
           	d.components = keys.map(function(key) 
           	{
           		if (d[key] <xsl:text disable-output-escaping = "yes"><![CDATA[>]]></xsl:text>= 0) {
           			return {key: key, y1: y0_positive, y0: y0_positive += d[key] };
           		} 
           		<!-- < > = -->
           		else if (d[key] <xsl:text disable-output-escaping = "yes"><![CDATA[<]]></xsl:text> 0) {
           			return {key: key, y0: y0_negative, y1: y0_negative += d[key] };
           		}
           	})
       	})
       	
       	var y_min = d3.min(data, function(d) { return d.cfnai - 0.1 });
       	var y_max = d3.max(data, function(d) { return d.cfnai + 0.1 });
       	
       	var datestart = d3.min(data, function(d) { return parseDate(d.date); });
       	var dateend = d3.max(data, function(d) { return parseDate(d.date); });
       	
       	x.domain([datestart, dateend]);
       	y.domain([y_min, y_max]);
       	color.domain(keys);
       
       <!--	var cfnai_ma3 = d3.line()
       		.x(function(d) { return x(parseDate(d.date)); })
       		.y(function(d) { return y(d.cfnai_ma3); });-->
       
       	var svg = d3.select("#barchart_in_out").append("svg")
       								.attr("width", width + margin.left + margin.right)
       								.attr("height", height + margin.top + margin.bottom)
       								.append("g")
       								.attr("transform", "translate(" + margin.left + "," + margin.top + ")");
       								
       	svg.append("g")
       		.attr("class", "x axis")
       		.attr("transform", "translate(0," + height + ")")
       		.call(xAxis);
       
       	svg.append("g")
       		.attr("class", "y axis")
       		.call(yAxis);
       
       	svg.append("g")
       		.attr("class", "centerline")
       		.attr("transform", "translate(0," + y(0) + ")")
       		.call(centerLine);
       
       	var entry = svg.selectAll(".entry")
       		.data(data)
       		.enter().append("g")
       		.attr("class", "g")
       		.attr("transform", function(d) { return "translate(" + x(parseDate(d.date)) + ", 0)"; });
       		
           <!-- here <rect> every bar can be edited -->
       	entry.selectAll("rect")
       		.data(function(d) { return d.components; })
       		.enter().append("a")
       		.attr("xlink:href", "www.wiki.at")
       		.append("rect")
       		.attr("width", 3)
       		.attr("y", function(d) { return y(d.y0); })
       		.attr("height", function(d) { return Math.abs(y(d.y0) - y(d.y1)); })
       		.style("fill", function(d) { return color(d.key); } )
       		.append("title")
       		.text(function(d) { return  "All entries in " + d.date; });
       		
    <!--   	var cfnai_ma3_line = svg.append("path")
       		.datum(data)
       		.attr("class", "line")
       		.attr("d", cfnai_ma3);
       -->
       	var legend = svg.selectAll(".legend")
       		.data(color.domain())
       		.enter().append("g")
       		.attr("class", "legend")
       		.attr("transform", function(d, i) { return "translate(0," + i * 20 + ")"; });
       
       	legend.append("rect")
       		.attr("x", 675)
       		.attr("y", function(d, i) { return i * 25 + 300 })
       		.attr("width", 18)
       		.attr("height", 18)
       		.style("fill", color )
       
       	legend.append("text")
       		.attr("x", 700)
       		.attr("y", function(d, i) { return i * 25 + 309; })
       		.attr("dy", ".35em")
       		.style("text-anchor", "start")
       		.text(function(d, i) { return labels[i]; });
       		
       		
        </script>
    </xsl:template>

    
    
    <!-- ///////////////////////////////////// -->
    <!--  Bubble Chart https://bl.ocks.org/john-guerra/0d81ccfd24578d5d563c55e785b3b40a with json -->
    <!-- ///////////////////////////////////// -->
    <xsl:template name="getBubbleChart">
        
        <script>
            <!-- data is stored as jason fpr d3 -->
            var data = {
             "name": "Product",
             "children": 
             [
             <xsl:for-each-group select="//s:results/s:result" group-by="s:Commodity">
                {
                    "name": "<xsl:value-of select="s:Commodity"/>",
                    "children": 
                    [
                        {
                          "name": "<xsl:value-of select="s:Commodity"/>",
                          "size": <xsl:value-of select="count(current-group())"/>
                        }
                    ]               
                }
                <xsl:if test="not(position()=last())">
                    <xsl:text>,</xsl:text>
                </xsl:if>
             </xsl:for-each-group>
             ]
            };

         var diameter = 960,
         format = d3.format(",d"),
         color = d3.scaleOrdinal(d3.schemeCategory20c);
         
         var bubble = d3.pack()
         .size([diameter, diameter])
         .padding(1.5);
         
         var svg = d3.select("#bubble").append("svg")
         .attr("width", diameter)
         .attr("height", diameter)
         .attr("class", "bubble");
         
         var root = d3.hierarchy(classes(data))
         .sum(function(d) { return d.value; })
         .sort(function(a, b) { return b.value - a.value; });
         
         bubble(root);
         var node = svg.selectAll(".node")
         .data(root.children)
         .enter().append("g")
         .attr("class", "node")
         .attr("transform", function(d) { return "translate(" + d.x + "," + d.y + ")"; });
         
         node.append("title")
         .text(function(d) { return d.data.className + ": " + format(d.value); });
         node.append("a")
         <!-- createsthe @href searchquery with d.data.className = bk:Commodity  -->
         .attr("xlink:href", function(d) { return "/archive/objects/query:depcha.index/methods/sdef:Query/get?params=$1|" + d.data.className})
         .append("circle")
         .attr("r", function(d) { return d.r; })
         .style("fill", function(d) { 
         return color(d.data.packageName); 
         });
         
         node.append("text")
         .attr("dy", ".3em")
         .style("text-anchor", "middle")
         .text(function(d) { return d.data.className.substring(0, d.r / 3); });
         
         // Returns a flattened hierarchy containing all leaf nodes under the root.
         function classes(root) {
         var classes = [];
         
         function recurse(name, node) {
         if (node.children) node.children.forEach(function(child) { recurse(node.name, child); });
         else classes.push({packageName: name, className: node.name, value: node.size});
         }
         
         recurse(null, root);
         return {children: classes};
         }
         
         d3.select(self.frameElement).style("height", diameter + "px");
         
        </script>
    </xsl:template>
    
    <xsl:template name="calculateSum_To">
        <xsl:param name="Collection_URI"/>
        <xsl:param name="Main_Recording_Author"/>
        <xsl:choose>
            <!-- 1 Pounds = 12 shilling = 20 Pence-->
            <xsl:when test="s:Collection/@uri = 'https://gams.uni-graz.at/context:depcha.stagville' or s:Collection/@uri = 'https://gams.uni-graz.at/context:depcha.wfp'">
                <xsl:value-of select="round(sum(current-group()[contains(s:From/@uri, $Main_Recording_Author)][s:Measurable_type/@uri='https://gams.uni-graz.at/o:depcha.bookkeeping#Money']/s:Quantity[../s:Unit = 'Pounds' or ../s:Unit = 'pounds']) +
                    (sum(current-group()[contains(s:To/@uri, $Main_Recording_Author)][s:Measurable_type/@uri='https://gams.uni-graz.at/o:depcha.bookkeeping#Money']/s:Quantity[../s:Unit = 'Shillings' or ../s:Unit = 'shillings']) div 12) +
                    (sum(current-group()[contains(s:To/@uri, $Main_Recording_Author)][s:Measurable_type/@uri='https://gams.uni-graz.at/o:depcha.bookkeeping#Money']/s:Quantity[../s:Unit = 'Pence' or ../s:Unit = 'pence']) div 20))"/>
            </xsl:when>
            <!-- contains(s:Collection/@uri,'context:depcha.wheaton') -->
            <xsl:when test="current-group()[1]/s:Collection/@uri = $Collection_URI">
                <xsl:value-of select="round(sum(current-group()[contains(s:To/@uri, $Main_Recording_Author)][s:Measurable_type/@uri='https://gams.uni-graz.at/o:depcha.bookkeeping#Money']/s:Quantity[../s:Unit = 'dollars']) +
                    (sum(current-group()[contains(s:To/@uri, $Main_Recording_Author)][s:Measurable_type/@uri='https://gams.uni-graz.at/o:depcha.bookkeeping#Money']/s:Quantity[../s:Unit = 'cents']) div 100))"/>
            </xsl:when>
            <xsl:otherwise>
                <xsl:value-of select="0"/>
            </xsl:otherwise>
        </xsl:choose>	
    </xsl:template>
    
    <xsl:template name="calculateSum_From">
        <xsl:param name="Collection_URI"/>
        <xsl:param name="Main_Recording_Author"/>
        <xsl:choose>
            <!-- 1 Pounds = 12 shilling = 20 Pence-->
            <xsl:when test="s:Collection/@uri = 'https://gams.uni-graz.at/context:depcha.stagville' or s:Collection/@uri = 'https://gams.uni-graz.at/context:depcha.wfp'">
                <xsl:variable name="Sum" select="sum(current-group()[contains(s:From/@uri, $Main_Recording_Author)][s:Measurable_type/@uri='https://gams.uni-graz.at/o:depcha.bookkeeping#Money']/s:Quantity[../s:Unit = 'Pounds' or ../s:Unit = 'pounds']) +
                    (sum(current-group()[contains(s:From/@uri, $Main_Recording_Author)][s:Measurable_type/@uri='https://gams.uni-graz.at/o:depcha.bookkeeping#Money']/s:Quantity[../s:Unit = 'Shillings' or ../s:Unit = 'shillings']) div 12) +
                    (sum(current-group()[contains(s:From/@uri, $Main_Recording_Author)][s:Measurable_type/@uri='https://gams.uni-graz.at/o:depcha.bookkeeping#Money']/s:Quantity[../s:Unit = 'Pence' or ../s:Unit = 'pence']) div 20)"/>
                <xsl:choose>
                    <xsl:when test="$Sum = 0">
                        <xsl:value-of select="0"/>
                    </xsl:when>
                    <xsl:otherwise><xsl:value-of select="-(round($Sum))"/></xsl:otherwise>
                </xsl:choose>
            </xsl:when>
            <!-- contains(s:Collection/@uri,'context:depcha.wheaton'); -() makes it a negative value -->
           <xsl:when test="s:Collection/@uri = $Collection_URI">
               <xsl:variable name="Sum" select="sum(current-group()[contains(s:From/@uri, $Main_Recording_Author)][s:Measurable_type/@uri='https://gams.uni-graz.at/o:depcha.bookkeeping#Money']/s:Quantity[../s:Unit = 'dollars']) +
                   (sum(current-group()[contains(s:From/@uri, $Main_Recording_Author)][s:Measurable_type/@uri='https://gams.uni-graz.at/o:depcha.bookkeeping#Money']/s:Quantity[../s:Unit = 'cents']) div 100)"/>
               <xsl:choose>
                   <xsl:when test="$Sum = 0">
                       <xsl:value-of select="0"/>
                   </xsl:when>
                   <xsl:otherwise><xsl:value-of select="-(round($Sum))"/></xsl:otherwise>
               </xsl:choose>
           </xsl:when>
           <xsl:otherwise>
               <xsl:value-of select="0"/>
           </xsl:otherwise>
           </xsl:choose>	
    </xsl:template>

</xsl:stylesheet>






<!-- ///////////////////////////////////// -->
<!--  Bar Chart https://bl.ocks.org/mbostock/3885304 -->
<!-- ///////////////////////////////////// -->
<!--<xsl:template name="getBarChart">
		<svg width="900" height="700" id="barchart"><xsl:text> </xsl:text></svg>
		<script> 
		    // The new data variable.
		   
		    var data = [
		    <!-\- select all results, group them by YYYY-valid entries -\->
		    <xsl:for-each-group select="//s:results/s:result[s:When castable as xs:date]" group-by="year-from-date(s:When)">
		        <xsl:sort select="current-grouping-key()"/>
		        
		        <xsl:variable name="Sum">
		            <xsl:choose>
		                <!-\- WASHINGTON punds, shilling, pence-\->
		                <xsl:when test="contains(//s:result[1]/s:query,'context:depcha.wfp')">
		                    <xsl:value-of select="round((sum(current-group()/s:Quantity[../s:Unit = 'Pounds'][distinct-values(../s:Transfer/@uri)])) + (sum(current-group()/s:Quantity[../s:Unit = 'Shillings'][distinct-values(../s:Transfer/@uri)]) div / 10)) + (sum(current-group()/s:Quantity[../s:Unit = 'Pence'][distinct-values(../s:Transfer/@uri)]) div / 100)"/>
		                </xsl:when>
		                <!-\- WHEATON dollar, cent -\->
		                <xsl:when test="contains(//s:result[1]/s:query,'context:depcha.wheaton')">
		                    <xsl:value-of select="round((sum(current-group()/s:Quantity[../s:Unit = 'dollars'][distinct-values(../s:Transfer/@uri)])) + (sum(current-group()/s:Quantity[../s:Unit = 'cents'][distinct-values(../s:Transfer/@uri)]) div / 100))"/>
		                </xsl:when>
		                <xsl:otherwise>
		                    <xsl:value-of select="1"/>
		                </xsl:otherwise>
		            </xsl:choose>
		        </xsl:variable>
		        <!-\- year= x-axis ; amount = y-axis-\->
		        {year: "<xsl:value-of select="current-grouping-key()"/>", amount: "<xsl:value-of select="$Sum"/>"}, 
		    </xsl:for-each-group>
			
		    ];
		    var svg = d3.select("#barchart"),
		    margin = {top: 20, right: 20, bottom: 30, left: 40},
		    width = +svg.attr("width") - margin.left - margin.right,
		    height = +svg.attr("height") - margin.top - margin.bottom;
		    
		    var x = d3.scaleBand().rangeRound([0, width]).padding(0.1),
		    y = d3.scaleLinear().rangeRound([height, 0]);
		    
		    var g = svg.append("g")
		    .attr("transform", "translate(" + margin.left + "," + margin.top + ")");
		    
		    // The following code was contained in the callback function.
		    x.domain(data.map(function(d) { return d.year; }));
		    y.domain([0, d3.max(data, function(d) { return parseFloat(d.amount); })]);
		    
		    g.append("g")
		    .attr("class", "axis axis-\-x")
		    .attr("transform", "translate(0," + height + ")")
		    .call(d3.axisBottom(x));
		    
		    g.append("g")
		    .attr("class", "axis axis-\-y")
		    .call(d3.axisLeft(y))
		    .append("text")
		    
		    g.selectAll(".bar")
		    .data(data)
		    .enter().append("rect")
		    .attr("class", "bar")
		    .attr("x", function(d) { return x(d.year); })
		    .attr("y", function(d) { return y(d.amount); })
		    .attr("width", x.bandwidth())
		    .attr("height", function(d) { return height - y(d.amount); });
		</script>
	</xsl:template>-->

