<?xml version="1.0" encoding="UTF-8"?>
<xsl:stylesheet xmlns:xsl="http://www.w3.org/1999/XSL/Transform" xmlns:xs="http://www.w3.org/2001/XMLSchema" exclude-result-prefixes="xs" version="2.0"
    xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:functx="http://www.functx.com"
    xmlns:gn="http://www.geonames.org/ontology#" 
    xmlns:gams="https://gams.uni-graz.at/o:gams-ontology/#"
    xmlns:bk="https://gams.uni-graz.at/o:medea.bookkeeping#" xmlns:skos="http://glossa.uni-graz.at/skos/scheme/o:oth/#"
    xmlns:t="http://www.tei-c.org/ns/1.0">
    <xsl:strip-space elements="*"/>
    

    <!--<xsl:include href="https://glossa.uni-graz.at/gamsdev/pollin/medea/trunk/www/medea-templates.xsl"/>-->
    <!-- VARIABLES -->   
    <!-- //////////////////////////////// -->
    <!-- global Variables -->
	<xsl:variable name="TEI" select="/"/>
    <xsl:variable name="Actual_PID" select="//t:publicationStmt/t:idno[@type = 'PID']"/>
    <xsl:variable name="TEIHeader" select="//t:teiHeader"/>

    <!-- ////////////////////////// -->
    <!-- check PID -->
    <xsl:template match="/">
        <rdf:RDF>
            <xsl:choose>
                <xsl:when test="$Actual_PID">
                    <xsl:apply-templates select="//t:text//*[tokenize(@ana, ' ') = '#bk_entry']"/>
                </xsl:when>
                <xsl:otherwise>
                	<xsl:text>ERROR: No PID defined in idno/@type="PID"</xsl:text>
                </xsl:otherwise>
            </xsl:choose>   
        </rdf:RDF>
    </xsl:template>
    
    
    <!-- ////////////////////////// -->
	<!-- bk_Entry -->
    <!-- goes through all Entries in a given TEI. Entries must be defined with @ana='#bk_entry'. -->
    <xsl:template match="t:text//*[tokenize(@ana, ' ') = '#bk_entry']">
        
        
        <xsl:variable name="Position" select="count(preceding::node()[tokenize(@ana, ' ') = '#bk_entry'])"/>
        
        
        
        <!-- /////////// -->
        <!-- bk_Where -->
        <!-- todo -->
        
        <!-- /////////// -->
        <!-- bk_from -->
        <xsl:variable name="bk_From">
            <xsl:choose>
                <xsl:when test=".//.[tokenize(@ana, ' ') = '#bk_from']">
                    <xsl:value-of select=".//.[tokenize(@ana, ' ') = '#bk_from']"/>
                </xsl:when>
                <xsl:when test="$TEIHeader//.[tokenize(@ana, ' ') = '#bk_from']">
                    <xsl:value-of select="//t:teiHeader//.//.[tokenize(@ana, ' ') = '#bk_from']"/>
                </xsl:when>
                <!-- if there is no bk_from in the current entry and in the header go to the first preceding-sibling and look for a bk_to -->
                <xsl:when test="preceding-sibling::*[not(tokenize(@ana, ' ') = '#bk_entry')][1]//*[@ana='#bk_from']">
                    <xsl:value-of select="preceding-sibling::*[not(tokenize(@ana, ' ') = '#bk_entry')][1]//*[@ana='#bk_from']"/>
                </xsl:when>
                <xsl:otherwise>
                    <xsl:text>Anonymous</xsl:text>
                </xsl:otherwise>
            </xsl:choose>
        </xsl:variable>
        <xsl:variable name="bk_From_ref">
            <xsl:choose>
                <xsl:when test=".//.[tokenize(@ana, ' ') = '#bk_from']/@ref">
                    <xsl:value-of select=".//.[tokenize(@ana, ' ') = '#bk_from']/@ref"/>
                </xsl:when>
                <xsl:when test="$TEIHeader//.[tokenize(@ana, ' ') = '#bk_from']/@ref">
                    <xsl:value-of select="//t:teiHeader//.//.[tokenize(@ana, ' ') = '#bk_from']/@ref"/>
                </xsl:when>
                <xsl:when test="preceding-sibling::*[not(tokenize(@ana, ' ') = '#bk_entry')][1]//*[@ana='#bk_from']/@ref">
                    <xsl:value-of select="preceding-sibling::*[not(tokenize(@ana, ' ') = '#bk_entry')][1]//*[@ana='#bk_from']/@ref"/>
                </xsl:when>
                <xsl:otherwise>
                    <xsl:text>Anonymous</xsl:text>
                </xsl:otherwise>
            </xsl:choose>
        </xsl:variable>
        
        
        <!-- concat('https://glossa.uni-graz.at/', $Actual_PID, '#Entry-', $Position, '-', .//.[tokenize(@ana, ' ') = '#bk_to']/@ref) -->
        
        <!-- /////////// -->
        <!-- bk_to -->
        <xsl:variable name="bk_To">
            <xsl:choose>
                <xsl:when test=".//.[tokenize(@ana, ' ') = '#bk_to']">
                    <xsl:value-of select=".//.[tokenize(@ana, ' ') = '#bk_to']"/>
                </xsl:when>
                <xsl:when test="$TEIHeader//.[tokenize(@ana, ' ') = '#bk_to']">
                    <xsl:value-of select="//t:teiHeader//.//.[tokenize(@ana, ' ') = '#bk_to']"/>
                </xsl:when>
                <!-- if there is no bk_from in the current entry and in the header go to the first preceding-sibling and look for a bk_to -->
                <xsl:when test="preceding-sibling::*[not(tokenize(@ana, ' ') = '#bk_entry')][1]//*[@ana='#bk_to']">
                    <xsl:value-of select="preceding-sibling::*[not(tokenize(@ana, ' ') = '#bk_entry')][1]//*[@ana='#bk_to']"/>
                </xsl:when>
                <xsl:otherwise>
                    <xsl:text>Anonymous</xsl:text>
                </xsl:otherwise>
            </xsl:choose>
        </xsl:variable>
        <xsl:variable name="bk_To_ref">
            <xsl:choose>
                <xsl:when test=".//.[tokenize(@ana, ' ') = '#bk_to']/@ref">
                    <xsl:value-of select=".//.[tokenize(@ana, ' ') = '#bk_to']/@ref"/>
                </xsl:when>
                <xsl:when test="$TEIHeader//.[tokenize(@ana, ' ') = '#bk_to']/@ref">
                    <xsl:value-of select="//t:teiHeader//.//.[tokenize(@ana, ' ') = '#bk_to']/@ref"/>
                </xsl:when>
                <xsl:when test="preceding-sibling::*[not(tokenize(@ana, ' ') = '#bk_entry')][1]//*[@ana='#bk_to']/@ref">
                    <xsl:value-of select="preceding-sibling::*[not(tokenize(@ana, ' ') = '#bk_entry')][1]//*[@ana='#bk_to']/@ref"/>
                </xsl:when>
                <xsl:otherwise>
                    <xsl:text>Anonymous</xsl:text>
                </xsl:otherwise>
            </xsl:choose>
        </xsl:variable>
        
        
        <!-- /////////// -->
        <!-- bk_Agent -->
        <xsl:variable name="bk_Agent">
        	<xsl:value-of select=".//.[tokenize(@ana, ' ') = '#bk_agent']"/>
        </xsl:variable>
    	<xsl:variable name="bk_Agent-ID">
    	    <xsl:value-of select=".//.[tokenize(@ana, ' ') = '#bk_agent']/@ref"/>
        </xsl:variable>
        
        

        <!-- /////////// -->
        <!-- TRANSACTION -->
        <xsl:variable name="Transaction-ID" select="concat('https://glossa.uni-graz.at/', $Actual_PID, '#Entry-',  $Position, '-Transaction')"/>
        <xsl:variable name="bk_Measurables" select=".//.[tokenize(@ana, ' ') = '#bk_money'] | .//.[tokenize(@ana, ' ') = '#bk_service'] | .//.[tokenize(@ana, ' ') = '#bk_commodity'] | .//.[tokenize(@ana, ' ') = '#bk_price']"/>
        <xsl:variable name="bk_Between_REF" select="$bk_To_ref | $bk_From_ref"/>
        
    	<xsl:comment>///TRANSACTION-<xsl:value-of select="$Position"/> BEGIN///</xsl:comment>
    	
        <bk:Transaction rdf:about="{$Transaction-ID}">
            <!-- for each bk_measurable grouped by @commodity: there is a transfer for all bk_measurable entities. $ + sh are in the same transfer -->
            <!--<xsl:for-each-group select="$bk_Measurables" group-by="@ana">
                    <xsl:variable name="Transfer-ID" select="concat('https://glossa.uni-graz.at/', $Actual_PID, '#Entry-', $Position, '-Transfer-', position())"/>
                    <bk:consists-of rdf:resource="{$Transfer-ID}"/>
            </xsl:for-each-group>-->
            <xsl:for-each-group select="$bk_Measurables" group-by="@ana">
                <xsl:variable name="Transfer-ID" select="concat('https://glossa.uni-graz.at/', $Actual_PID, '#Entry-', $Position, '-Transfer-', position())"/>
                <bk:consists-of rdf:resource="{$Transfer-ID}"/>
            </xsl:for-each-group>
            
            
            <!-- /////////// -->
            <!-- bk:when -->
                <xsl:choose>
                    <!-- bk_ in entry -->
                    <xsl:when test=".//.[@ana = '#bk_when']/@when">
                        <bk:when>
                            <xsl:value-of select=".//.[@ana = '#bk_when']/@when"/>
                        </bk:when>
                    </xsl:when>
                    <!-- if a <head> is before containing bk_when -->
                    <xsl:when test="preceding::t:head//.[@ana = '#bk_when']/@when">
                        <bk:when>
                            <xsl:value-of select="preceding::t:head//.[tokenize(@ana, ' ') = '#bk_when']/@when"/>
                        </bk:when>
                    </xsl:when>
                    <xsl:when test="preceding::t:date[@ana='#bk_when'][1]/@when">
                        <bk:when>
                            <xsl:value-of select="preceding::t:date[@ana='#bk_when'][1]/@when"/>
                        </bk:when>
                    </xsl:when>
                    <xsl:otherwise/>
                </xsl:choose>
            
            
           <!-- transactionStatus pp. ; in full -->
             <xsl:for-each select=".//.[tokenize(@ana, ' ') = '#bk_transactionStatus']">
                <bk:status>
                  <xsl:value-of select="."/>
                </bk:status>
            </xsl:for-each>

            
            <bk:hasEntry>
                <xsl:for-each select=".//text()">
                    <xsl:value-of select="normalize-space(.)"/>
                    <xsl:if test="not(position() = last())">
                        <xsl:text> </xsl:text>
                    </xsl:if>
                </xsl:for-each>
            </bk:hasEntry>
            
            
           <!-- connect every Transaction to a Collection (like context:medea.wheaton) -->
            <xsl:for-each select="//t:teiHeader//*[@type='context']">
                <xsl:variable name="Context" select="substring-after(//t:teiHeader//*[@type='context']/@target, 'info:fedora/')"/>
                <gams:isMemberOfCollection rdf:resource="{concat('https://glossa.uni-graz.at/', $Context)}"/>
            </xsl:for-each>
           
           
            
            <!-- /////////// -->
            <!-- bk:where -->
            <!--<xsl:if test="$bk_Where">
                <bk:when>
                    <xsl:value-of select="$bk_Where"/>   
                </bk:when>
            </xsl:if>-->
        </bk:Transaction>
    	<!-- END TRANSACTON -->
        
        <!-- /////////// -->
        <!-- TRANSFERS -->
        <xsl:for-each-group select="$bk_Measurables" group-by="@ana">
            <xsl:variable name="Transfer-ID" select="concat('https://glossa.uni-graz.at/', $Actual_PID, '#Entry-', $Position, '-Transfer-', position())"/>
            <xsl:variable name="Measurable-ID" select="concat('https://glossa.uni-graz.at/', $Actual_PID,  '#Entry-',  $Position, '-Measurable-', position())"/>
            <bk:Transfer rdf:about="{$Transfer-ID}">  
                
                <!-- ////////////////////////////////////// -->
                <xsl:choose>
                    <xsl:when test="count(current-group()) > 1">
                        <xsl:for-each-group select="current-group()" group-by="@unit">
                            <bk:transfers rdf:resource="{concat($Measurable-ID, '-', position())}"/>
                        </xsl:for-each-group>
                    </xsl:when>
                    <xsl:otherwise>
                        <bk:transfers rdf:resource="{$Measurable-ID}"/>
                    </xsl:otherwise>
                </xsl:choose>
                
                <!-- bk_to; bk_from -->
                <!-- additional bk_to  ana="#bk_money #bk_to" defines to whom the measurable belongs   -->
                <xsl:choose>
                    <!-- CASE, this is turned arround  -->
                    <xsl:when test="contains(@ana,  '#bk_to')">
                        <bk:from rdf:resource="{concat('https://glossa.uni-graz.at/', $Actual_PID, '#Entry-', $Position, '-', $bk_To_ref)}"/>
                        <bk:to rdf:resource="{concat('https://glossa.uni-graz.at/', $Actual_PID, '#Entry-', $Position, '-', $bk_From_ref)}"/>
                    </xsl:when>
                    <!-- CASE -->
                    <xsl:when test="contains(@ana, '#bk_from')">
                        <bk:from rdf:resource="{concat('https://glossa.uni-graz.at/', $Actual_PID, '#Entry-', $Position, '-', $bk_From_ref)}"/>
                        <bk:to rdf:resource="{concat('https://glossa.uni-graz.at/', $Actual_PID, '#Entry-', $Position, '-', $bk_To_ref)}"/>
                    </xsl:when>
                    <xsl:otherwise>
                       <xsl:comment>Error: problem identifying #bk_to; #bk_from; #bk_Agent. The @ana need further #bk_to #bk_from like measure ana="#bk_money #bk_to"</xsl:comment>
                    </xsl:otherwise>
                </xsl:choose>
                
                <!-- /////////// -->
                <!-- bk:by bk:Agent, if the <masure @ana> conains a  #bk_agent the connection to the bk_Agent is build-->
                <xsl:if test="contains(current-grouping-key(), '#bk_agent')">
                    <bk:by rdf:resource="{concat('https://glossa.uni-graz.at/', $Actual_PID, '#Entry-',  $Position, '-', $bk_Agent-ID)}"/>
                </xsl:if>
                
                
                <!-- /////////// -->
                <!-- bk_Entry -->
                
            </bk:Transfer>
        </xsl:for-each-group>
    	<!-- END TRANSFER -->
        
        <!-- /////////// -->
        <!-- MEASURABLES -->
        <xsl:for-each-group select="$bk_Measurables" group-by="@ana">
            <xsl:variable name="Measurable-ID" select="concat('https://glossa.uni-graz.at/', $Actual_PID,  '#Entry-',  $Position, '-Measurable-', position())"/>
            <!-- error-handling '_' -->
            <xsl:choose>
                <xsl:when test="contains(@ana, '#bk_money') or contains(@ana, '#bk_service') or contains(@ana, '#bk_commodity')">
                    <xsl:variable name="firstChar" select="upper-case(substring(substring-after(@ana, '_'),1,1))"/>
                    <xsl:variable name="SubClassofMeasurables">
                        <xsl:choose>
                            <!-- if @ana="#bk_money #bk_to" -->
                            <xsl:when test="contains(@ana, ' ')">
                                <xsl:value-of select="substring-before(concat($firstChar, substring(substring-after(@ana, '_'), 2),' '[not(last())]), ' ')"/>
                            </xsl:when>
                            <xsl:otherwise>
                                <xsl:value-of select="concat( $firstChar, substring(substring-after(@ana, '_'), 2),' '[not(last())])"/> 
                            </xsl:otherwise>
                        </xsl:choose> 
                    </xsl:variable>
                    <!-- create bk:Money, bk:Commodity, bk_Service -->
                    
                    <xsl:choose>
                        <!-- more than 1 measure, like 1 dollar 50 cents -->
                        <xsl:when test="count(current-group()) > 1">
                            <xsl:for-each-group select="current-group()" group-by="@unit">
                                <xsl:element name="{concat('bk:', $SubClassofMeasurables)}">
                                    <xsl:attribute name="rdf:about" select="concat($Measurable-ID, '-', position())"/>
                                        <bk:unit>
                                            <xsl:value-of select="current-grouping-key()"/>
                                        </bk:unit>
                                    
                                    <xsl:if test="@quantity">
                                        <bk:quantity>
                                            <xsl:value-of select="@quantity"/>
                                        </bk:quantity>
                                    </xsl:if>
                                    <xsl:if test="@commodity and not(@commodity = 'currency')">
                                        <bk:commodity>
                                            <xsl:value-of select="@commodity"/>
                                        </bk:commodity>
                                    </xsl:if>
                                    <bk:text>
                                        <xsl:value-of select="."/>
                                    </bk:text>
                                </xsl:element>
                            </xsl:for-each-group>
                        </xsl:when>
                        <!-- 1 measure -->
                        <xsl:otherwise>
                            <xsl:element name="{concat('bk:', $SubClassofMeasurables)}">
                                <xsl:attribute name="rdf:about" select="$Measurable-ID"/>
                                <xsl:if test="@unit">
                                    <bk:unit>
                                        <xsl:value-of select="@unit"/>
                                    </bk:unit>
                                </xsl:if>
                                <xsl:if test="@quantity">
                                    <bk:quantity>
                                        <xsl:value-of select="@quantity"/>
                                    </bk:quantity>
                                </xsl:if>
                                <xsl:if test="@commodity and not(@commodity = 'currency')">
                                    <bk:commodity>
                                        <xsl:value-of select="@commodity"/>
                                    </bk:commodity>
                                </xsl:if>
                                <bk:text>
                                    <xsl:value-of select="."/>
                                </bk:text>
                            </xsl:element>
                        </xsl:otherwise>
                    </xsl:choose>
                </xsl:when>
                <xsl:otherwise>
                    <xsl:comment>ERROR: Failed to create bk:Measurable: missing @ana;</xsl:comment>
                </xsl:otherwise>
            </xsl:choose> 
        </xsl:for-each-group>
    	<!-- END MEASURABLE-->
    	
    	<!-- /////////// -->
        <!-- BETWEEN -->
    	<xsl:for-each-group select="$bk_Between_REF" group-by=".">
	    	<bk:Between rdf:about="{concat('https://glossa.uni-graz.at/', $Actual_PID, '#Entry-', $Position, '-', .)}">
	    		<xsl:for-each select="distinct-values($TEI//.[@ref = current-grouping-key()])">
	    			<bk:hasName>
	    				<xsl:value-of select="."/>
	    		     </bk:hasName>
	    		</xsl:for-each>
	    	</bk:Between>
    	</xsl:for-each-group>
        
        <!-- /////////// -->
        <!-- Agent -->
        <xsl:if test="not($bk_Agent = '')">
        <xsl:for-each-group select="$bk_Agent" group-by=".">
            <bk:Agent rdf:about="{concat('https://glossa.uni-graz.at/', $Actual_PID, '#Entry-',  $Position, '-', $bk_Agent-ID)}">
                    <bk:hasName>
                        <xsl:if test="./@ref = $bk_Agent-ID">
                            <xsl:value-of select="."/>
                        </xsl:if>
                    </bk:hasName>
            </bk:Agent>
        </xsl:for-each-group>
        </xsl:if>

    	
            
            
    </xsl:template>
    

    
        
        
        <!-- bk:Transaction is main element for every Transfer -->
        <!--<bk:Transfer rdf:about="{$Transfer-ID}">
            <xsl:apply-templates></xsl:apply-templates>
            
            <bk:hasEntry rdf:resource="{$Entry-ID}"/>
        </bk:Transfer>-->
            <!-- for each bk:Good -->
           <!-- <xsl:for-each select=".//.[tokenize(@ana, ' ') = '#bk_what']">
                <bk:transfers rdf:resource="{concat($Good-ID, '-', position())}"/>
            </xsl:for-each>-->
            
            <!-- for each bk:MonetaryValue -->
           <!-- <xsl:for-each select=".//.[tokenize(@ana, ' ') = '#bk_amount']">
                <xsl:choose>               
                  <xsl:when test="local-name() = 'measure'">
                      <bk:transfers rdf:resource="{concat($MonetaryValue-ID, '-', position())}"/>
                  </xsl:when>
                  <xsl:otherwise>
                      <xsl:for-each select=".//t:measure">
                          <bk:transfers rdf:resource="{concat($MonetaryValue-ID, '-', position())}"/>
                      </xsl:for-each>
                  </xsl:otherwise>
                </xsl:choose>                
            </xsl:for-each>
            -->
            <!-- for each bk:Service -->
           <!-- <xsl:for-each select=".//.[tokenize(@ana, ' ') = '#bk_service']">
                <bk:transfers rdf:resource="{concat($Service-ID, '-', position())}"/>
            </xsl:for-each>-->
            
            
            <!-- bk:from -->
           <!-- <xsl:for-each select="$bk_from">
                    <bk:from>
                        <xsl:attribute name="rdf:resource">
                            <xsl:value-of select="concat($Between-ID, .)"/>
                        </xsl:attribute>
                    </bk:from>                   
            </xsl:for-each>
            
            <!-\- bk:to -\->
            <xsl:for-each select="$bk_to">
                    <bk:to>
                        <xsl:attribute name="rdf:resource">
                            <xsl:value-of select="concat($Between-ID, .)"/>
                        </xsl:attribute>
                    </bk:to>
            </xsl:for-each>
             
            <!-\- bk:when -\->
            
            
            
            <!-\- DATE -\->
            <xsl:variable name="Date">
                <xsl:choose>
                    <!-\- date appearing in the bk_entry -\->
                    <xsl:when test=".//.[tokenize(@ana, ' ') = '#bk_when']">
                        <xsl:choose>
                            <xsl:when test=".//.[tokenize(@ana, ' ') = '#bk_when']/@from">
                                <xsl:value-of select=".//.[tokenize(@ana, ' ') = '#bk_when']/@from"/>
                            </xsl:when>
                            <xsl:when test=".//.[tokenize(@ana, ' ') = '#bk_when']/@when">
                                <xsl:value-of select=".//.[tokenize(@ana, ' ') = '#bk_when']/@when"/>
                            </xsl:when>
                            <xsl:otherwise>missing @</xsl:otherwise>
                        </xsl:choose>
                    </xsl:when>
                    <!-\- date from header for all entries -\->
                    <!-\- //text//.[tokenize(@ana, ' ') = '#bk_entry']/root()//teiHeader//.[tokenize(@ana, ' ') = '#bk_when']/@from -\->
                    <xsl:when test="./root()//t:teiHeader//.[tokenize(@ana, ' ') = '#bk_when']">
                        <xsl:choose>
                            <xsl:when test="./root()//t:teiHeader//.[tokenize(@ana, ' ') = '#bk_when']/@from">
                                <xsl:value-of select="./root()//t:teiHeader//.[tokenize(@ana, ' ') = '#bk_when']/@from"/>
                            </xsl:when>
                            <xsl:when test="./root()//t:teiHeader//.[tokenize(@ana, ' ') = '#bk_when']/@when">
                                <xsl:value-of select="./root()//t:teiHeader//.[tokenize(@ana, ' ') = '#bk_when']/@when"/>
                            </xsl:when>
                            <xsl:otherwise><xsl:comment>missing @</xsl:comment></xsl:otherwise>
                        </xsl:choose>
                    </xsl:when>
                    <xsl:otherwise><xsl:comment>missing date</xsl:comment></xsl:otherwise>
                </xsl:choose>
            </xsl:variable>

            <!-\- check if datatype date is okay -\->
            <xsl:choose>
                <xsl:when test="$Date castable as xs:date">
                    <bk:when>
                        <xsl:value-of select="$Date"/>
                    </bk:when>
                </xsl:when>
                <xsl:otherwise><xsl:comment>not valid date</xsl:comment></xsl:otherwise>
            </xsl:choose>
        </bk:Transfer>
        
        <!-\- ////////////////////////// -\->
        <!-\- Here define apply-templates with .//.[tokenize(@ana, ' ') = '#ANA-NAME-FROM-TEI-BASED-ON-ONTOLOGIE'] -\->
        
        
        <!-\- bk:Entry has bk:debit and bk:dredit -\->
        <bk:Entry rdf:about="{$Entry-ID}">
            <xsl:apply-templates select=".//.[tokenize(@ana, ' ') = '#bk_debit'] | .//.[tokenize(@ana, ' ') = '#bk_credit']"/>
            <bk:hasText>
                <xsl:call-template name="Fulltext"/>
            </bk:hasText>
        </bk:Entry>
        
        <!-\- bk:Between-\->  
        <xsl:call-template name="Between">
            <xsl:with-param name="Between-ID" select="$Between-ID"/>
            <xsl:with-param name="bk_to" select="$bk_to"/>
            <xsl:with-param name="bk_from" select="$bk_from"/>
            <!-\-<xsl:with-param name="Between_Choose" select="$Between_Choose"/>-\->
        </xsl:call-template>
        
        
        <!-\- bk:Good -\-> 
        <xsl:apply-templates select=".//.[tokenize(@ana, ' ') = '#bk_what']">
            <xsl:with-param name="Good-ID" select="$Good-ID"/>
        </xsl:apply-templates>
        
        <!-\- bk:MonetaryValue -\->
        <xsl:apply-templates select=".//.[tokenize(@ana, ' ') = '#bk_amount']">
            <xsl:with-param name="MonetaryValue-ID" select="$MonetaryValue-ID"/>
        </xsl:apply-templates>
        
        <!-\- bk:MonetaryValue -\->
        <xsl:apply-templates select=".//.[tokenize(@ana, ' ') = '#bk_service']">
            <xsl:with-param name="Service-ID" select="$Service-ID"/>
        </xsl:apply-templates>
       -->
        

    
    
    <!-- ////////////////////////////////////////////////////////////////////// -->
    <!-- ////////////////////////////////////////////////////////////////////// -->
    <!-- MATCHED TEMPLATES -->
    
    
    <!-- <xsl:template match="@xml:id">
        <xsl:param name="Account-ID"/>
        <bk:Accouount rdf:about="{$Account-ID}"/>
    </xsl:template>-->
    
    
    <!-- ////////////////////////// -->
    <!-- bk:Debit -->
    <xsl:template match="element()[tokenize(@ana, ' ') = '#bk_debit']">
        <xsl:if test=".">
            <bk:debit>true</bk:debit>
        </xsl:if>
    </xsl:template>
    
    <!-- ////////////////////////// -->
    <!-- bk:Credit -->
    <xsl:template match="element()[tokenize(@ana, ' ') = '#bk_credit']">
        <xsl:if test=".">
            <bk:credit>true</bk:credit>
        </xsl:if>
    </xsl:template>
    
    
    <!-- SKIP bk_total -->
    <xsl:template match="element()[tokenize(@ana, ' ') = '#bk_total']">
        
    </xsl:template>

    
    <!-- ////////////////////////// -->
    <!-- SKIP this Elements. -->
    <xsl:template match="t:teiHeader | t:head | t:fw | t:front"/>
    
    <!-- ////////////////////////// -->
    <!-- TEMPLATES for bk_Measurables -->
    
    
    <!-- ////////////////////////// -->
    <!-- bk:Commodity-->
    <xsl:template match="element()[tokenize(@ana, ' ') = '#bk_commodity']">
      <!--  <xsl:param name="Good-ID"/>
        <xsl:choose>
            <xsl:when test="local-name() = 'measure'">
                <bk:Good rdf:about="{concat($Good-ID, '-', position())}">
                    <xsl:call-template name="getUnitandQuanitity"/>
                </bk:Good>
            </xsl:when>
            <xsl:otherwise>
                <xsl:for-each select=".//t:measure">
                    <bk:Good rdf:about="{concat($Good-ID, '-', position())}">
                        <xsl:call-template name="getUnitandQuanitity"/>
                    </bk:Good>
                </xsl:for-each>
            </xsl:otherwise>
        </xsl:choose>-->
       <!-- <xsl:for-each select=".//t:measure">
             <bk:Good rdf:about="{concat($Good-ID, '-', position())}">
                 <xsl:call-template name="getUnitandQuanitity"/>
             </bk:Good>
        </xsl:for-each>-->
    </xsl:template>
    
    
    <!-- ////////////////////////// -->
    <!-- bk:MonetaryValue -->
    <xsl:template match="*[tokenize(@ana, ' ') = '#bk_money']">
        <!--xsl:param name="MonetaryValue-ID"/>
        <!-\- check if measure is the element with @ana='#bk_amount', otherwise go further the xml structure for t:measure -\->
        <xsl:choose>
            <xsl:when test="local-name() = 'measure'">
                <bk:MonetaryValue rdf:about="{concat($MonetaryValue-ID, '-', position())}">
                    <xsl:call-template name="getUnitandQuanitity"/>
                </bk:MonetaryValue>
            </xsl:when>
            <xsl:otherwise>
                <xsl:for-each select=".//t:measure">
                    <bk:MonetaryValue rdf:about="{concat($MonetaryValue-ID, '-', position())}">
                        <xsl:call-template name="getUnitandQuanitity"/>
                    </bk:MonetaryValue>
                </xsl:for-each>
            </xsl:otherwise>
        </xsl:choose>-->
    </xsl:template>
    
    
    <!-- ////////////////////////// -->
    <!-- bk:Service -->
    <xsl:template match="element()[tokenize(@ana, ' ') = '#bk_service']">
        <!-- <xsl:param name="Service-ID"/>
        <xsl:choose>
            <xsl:when test="local-name() = 'measure'">
                <bk:Service rdf:about="{concat($Service-ID, '-', position())}">
                    <xsl:call-template name="getUnitandQuanitity"/>
                </bk:Service>
            </xsl:when>
            <xsl:otherwise>
                <xsl:for-each select=".//t:measure">
                    <bk:Service rdf:about="{concat($Service-ID, '-', position())}">
                        <xsl:call-template name="getUnitandQuanitity"/>
                    </bk:Service>
                </xsl:for-each>
            </xsl:otherwise>
        </xsl:choose>-->
        
        <!--<xsl:for-each select=".//t:measure">
            <bk:Service rdf:about="{concat($Service-ID, '-', position())}">
                <xsl:call-template name="getUnitandQuanitity"/>
            </bk:Service>
            
        </xsl:for-each>-->
    </xsl:template>
    
    <!-- ////////////////////////// -->
    <!-- bk:MonetaryValue -->
    <xsl:template match="element()[tokenize(@ana, ' ') = '#bk_price']">
        <xsl:param name="Price-ID"/>
        <!-- check if measure is the element with @ana='#bk_amount', otherwise go further the xml structure for t:measure -->
        <xsl:choose>
            <xsl:when test="local-name() = 'measure'">
                <bk:Price rdf:about="{concat($Price-ID, '-', position())}">
                    <xsl:call-template name="getUnitandQuanitity"/>
                </bk:Price>
            </xsl:when>
            <xsl:otherwise>
                <xsl:for-each select=".//t:measure">
                    <bk:Price rdf:about="{concat($Price-ID, '-', position())}">
                        <xsl:call-template name="getUnitandQuanitity"/>
                    </bk:Price>
                </xsl:for-each>
            </xsl:otherwise>
        </xsl:choose>
    </xsl:template>
    
    
    <xsl:template match="t:note">
        
    </xsl:template>
    
    
    
    <!-- ////////////////////////////////////////////////////////////////////// -->
    <!-- ////////////////////////////////////////////////////////////////////// -->
    <!-- CALLED TEMPLATES -->
    

    
   <!-- ////////////////////////// -->
   <!-- bk:Between -->
    <xsl:template name="Between">
        <xsl:param name="Between-ID"/>
        <xsl:param name="bk_to"/>
        <xsl:param name="bk_from"/>
        <xsl:for-each select="$bk_to">
            <bk:Between>
                <xsl:attribute name="rdf:about">
                    <xsl:value-of select="concat($Between-ID, $bk_from)"/>
                </xsl:attribute>
            </bk:Between>
            <bk:Between>
                <xsl:attribute name="rdf:about">
                    <xsl:value-of select="concat($Between-ID, $bk_to)"/>
                </xsl:attribute> 
            </bk:Between>
        </xsl:for-each>
    </xsl:template>
    
    <!-- ////////////////////////// -->
    <!-- FULLTEXT for fulltextsearch with whitespace cleaning and normalization -->
    <xsl:template name="Fulltext">
        <xsl:for-each select=".//text()">
            <xsl:value-of select="normalize-space(.)"/>
            <xsl:text> </xsl:text>
        </xsl:for-each>
    </xsl:template>
    

    
    <xsl:template name="getUnitandQuanitity">
        <xsl:choose>
            <xsl:when test="@unit">
                <bk:unit>
                	<xsl:attribute name="rdf:resource">
                		<xsl:choose>
                			<xsl:when test="contains(@unit, 'uni-graz.at')">
                				<xsl:value-of select="@unit"/>
                			</xsl:when>
                			<xsl:otherwise>
                				 <xsl:value-of select="concat('https://glossa.uni-graz.at/#', @unit)"/>
                			</xsl:otherwise>
                		</xsl:choose>
                	</xsl:attribute>
                </bk:unit>
            </xsl:when>
            <xsl:otherwise>
                <xsl:comment>no @unit</xsl:comment>
            </xsl:otherwise>
        </xsl:choose>
        <xsl:choose>
            <xsl:when test="@quantity">
                <bk:quantity>
                    <xsl:value-of select="@quantity"/>
                </bk:quantity>
            </xsl:when>
            <xsl:otherwise>
                <xsl:comment>no @u@quantity</xsl:comment>
            </xsl:otherwise>
        </xsl:choose>
    </xsl:template>
    
    
</xsl:stylesheet>







<!--  
        <xsl:variable name="Entry-ID" select="concat('https://glossa.uni-graz.at/', $Actual_PID, '#Entry-', $Position)"/>-->

<!-- Measurables -->
<!--  <xsl:variable name="Good-ID" select="concat('https://glossa.uni-graz.at/', $Actual_PID,  '#Entry-',  $Position, '-Good')"/>
        <xsl:variable name="MonetaryValue-ID" select="concat('https://glossa.uni-graz.at/', $Actual_PID,  '#Entry-', $Position, '-MonetaryValue')"/>
        <xsl:variable name="Service-ID" select="concat('https://glossa.uni-graz.at/', $Actual_PID,  '#Entry-', $Position, '-Service')"/>
        <xsl:variable name="Price-ID" select="concat('https://glossa.uni-graz.at/', $Actual_PID,  '#Entry-', $Position, '-Price')"/>
        
        <xsl:variable name="Between-ID" select="concat('https://glossa.uni-graz.at/', '-Between-')"/>-->
<!--<xsl:variable name="Party-ID" select="concat('https://glossa.uni-graz.at/', $Actual_PID,  '#Entry-', $Position, '-Party')"/>
        <xsl:variable name="Account-ID" select="concat('https://glossa.uni-graz.at/', $Actual_PID,  '#Entry-', $Position, '-Account')"/>-->


<!-- /////////// -->
<!-- get  bk_from, to and when-->
<!-- bk_from -->
<!-- <xsl:variable name="bk_from">
            <xsl:call-template name="get_bk_">
                <xsl:with-param name="actualTerm" select="'#bk_from'"/>
            </xsl:call-template>
        </xsl:variable>  
        <!-\- bk_to -\->
        <xsl:variable name="bk_to">
            <xsl:call-template name="get_bk_">
                <xsl:with-param name="actualTerm" select="'#bk_to'"/>
            </xsl:call-template>
        </xsl:variable> 
        <!-\- bk_when = date -\->
        <xsl:variable name="bk_when">
            <xsl:call-template name="get_bk_">
                <xsl:with-param name="actualTerm" select="'#bk_when'"/>
            </xsl:call-template>
        </xsl:variable> -->
